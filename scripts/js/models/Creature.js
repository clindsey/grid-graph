// Generated by CoffeeScript 1.4.0
(function() {

  define(["models/Entity", "models/Heightmap", "Machine", "Backbone"], function(EntityModel, heightmapModel) {
    var Creature;
    return Creature = EntityModel.extend({
      initialize: function() {
        var machine,
          _this = this;
        machine = new Machine;
        this.set("state", machine.generateTree(this.behaviorTree, this, this.states));
        return this.listenTo(this, "tick", function() {
          return _this.set("state", _this.get("state").tick());
        });
      },
      behaviorTree: {
        identifier: "idle",
        strategy: "prioritised",
        children: [
          {
            identifier: "followPath"
          }
        ]
      },
      states: {
        idle: function() {},
        followPath: function() {
          var dir, dirCombos, heightmapData, mx, my, vx, vy, _results;
          dirCombos = [[1, 0], [-1, 0], [0, 1], [0, -1]];
          dirCombos = _.shuffle(dirCombos);
          _results = [];
          while (dirCombos.length) {
            dir = dirCombos.pop();
            vx = dir[0];
            vy = dir[1];
            mx = heightmapModel.clampX(this.get("x") + vx);
            my = heightmapModel.clampY(this.get("y") + vy);
            heightmapData = heightmapModel.get("data");
            if (heightmapData[my][mx].get("roadType") === 1) {
              this.set({
                "x": mx,
                "y": my
              });
              break;
            } else {
              _results.push(void 0);
            }
          }
          return _results;
        },
        canFollowPath: function() {
          return true;
        }
      }
    });
  });

}).call(this);
