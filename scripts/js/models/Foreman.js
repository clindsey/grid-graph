// Generated by CoffeeScript 1.4.0
(function() {

  define(["collections/Creatures", "models/heightmap/Heightmap", "collections/MapTiles", "models/entities/Creature", "collections/Buildings", "models/buildings/Farm", "models/buildings/Road", "models/buildings/Home", "Backbone"], function(creatures, heightmapModel, mapTiles, CreatureModel, buildings, FarmModel, RoadModel, HomeModel) {
    var Foreman;
    Foreman = Backbone.Model.extend({
      removeBuilding: function(tileModel) {
        var buildingModel, foundBuildings, x, y;
        x = tileModel.get("x");
        y = tileModel.get("y");
        foundBuildings = buildings.where({
          x: x,
          y: y
        });
        buildingModel = _.first(foundBuildings);
        buildings.remove(buildingModel);
        return this.informNeighbors(tileModel);
      },
      putRoad: function(tileModel) {
        var roadModel, x, y;
        x = tileModel.get("x");
        y = tileModel.get("y");
        roadModel = new RoadModel({
          tileModel: tileModel,
          x: x,
          y: y
        });
        buildings.add(roadModel);
        return this.informNeighbors(tileModel);
      },
      putFarm: function(tileModel) {
        var farmModel, x, y;
        x = tileModel.get("x");
        y = tileModel.get("y");
        farmModel = new FarmModel({
          tileModel: tileModel,
          x: x,
          y: y
        });
        buildings.add(farmModel);
        this.informNeighbors(tileModel);
        return this.findWorker(farmModel);
      },
      putHome: function(tileModel) {
        var creatureModel, homeModel, x, y;
        x = tileModel.get("x");
        y = tileModel.get("y");
        homeModel = new HomeModel({
          tileModel: tileModel,
          x: x,
          y: y
        });
        buildings.add(homeModel);
        this.informNeighbors(tileModel);
        creatureModel = new CreatureModel({
          x: x,
          y: y
        });
        creatures.add(creatureModel);
        creatureModel.set("home", homeModel);
        homeModel.set("creature", creatureModel);
        return this.findJob(creatureModel);
      },
      assignWorkerToSite: function(unemployedCreature, workSiteModel) {
        unemployedCreature.set("workSite", workSiteModel);
        return workSiteModel.set("worker", unemployedCreature);
      },
      findJob: function(unemployedCreature) {
        var availableJobs, path, workSiteModel;
        availableJobs = buildings.where({
          needsWorker: true,
          worker: void 0
        });
        if (availableJobs.length === 0) {
          return;
        }
        workSiteModel = _.first(availableJobs);
        path = unemployedCreature.findPath(workSiteModel);
        if (path.length === 0) {
          return;
        }
        return this.assignWorkerToSite(unemployedCreature, workSiteModel);
      },
      findWorker: function(workSiteModel) {
        var path, unemployedCreature, unemployedCreatures;
        unemployedCreatures = creatures.where({
          workSite: void 0
        });
        if (unemployedCreatures.length === 0) {
          return;
        }
        unemployedCreature = _.first(unemployedCreatures);
        path = unemployedCreature.findPath(workSiteModel);
        if (path.length === 0) {
          return;
        }
        return this.assignWorkerToSite(unemployedCreature, workSiteModel);
      },
      informNeighbors: function(tileModel) {
        var neighboringTiles, x, y;
        x = tileModel.get("x");
        y = tileModel.get("y");
        neighboringTiles = heightmapModel.getNeighboringTiles(x, y);
        return _.each(neighboringTiles, function(neighboringTile) {
          return neighboringTile.trigger("neighborChanged");
        });
      }
    });
    return new Foreman;
  });

}).call(this);
